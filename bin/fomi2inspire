#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'yaml'
require 'rainbow'

$LOAD_PATH << './lib/'
require 'fomi2inspire.rb'


program :version, Fomi2inspire::VERSION
program :description, 'Transforming FOMI data to INSPIRE'
 
command :check do |c|
  c.syntax = 'fomi2inspire check [options]'
  c.summary = 'Checks if connection to inspire database. Also checks the existance of feature_types and gml_objects tables.'
  c.description = 'Usage: fomi2inspire check [-config database.yml] or -h hostname -d dbname'
  c.example 'description', ''
  c.option '-config', 'Connection with database.yml file'
  c.option '-h', 'Remote Database Hostname'
  c.option '-d', 'Database Name'
  c.action do |args, options|
    config = {}
    if options.config
      config = YAML.load_file(args[0])
    else
      config[:adapter] = 'postgresql'
      config[:host] = args[0]
      config[:database] = args[1]
      config[:username] = ask("Database user name:")
      config[:password] = ask("Database password:"){ |q|
        q.echo = "*"
      }
    end
    begin
      validator = InspireValidator.new(config)
      unless validator.inspire_tables?
        puts "Invalid INSPIRE schema in database [#{config[:database]}]\n \t ~> Fix: fomi2inspire setup".foreground(:red)
      else
        puts "Valid INSPIRE schema in database: [#{config[:database]}]".foreground(:green)
      end      
    rescue Exception => e
      puts (e.to_s).foreground(:red)
    end
  end
end

command :transform do |c|
  c.syntax = 'fomi2inspire transform [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Fomi2inspire::Commands::Transform
  end
end

command :update do |c|
  c.syntax = 'fomi2inspire update [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Fomi2inspire::Commands::Update
  end
end

